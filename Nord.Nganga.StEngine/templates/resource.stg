templateVersion() ::=<%
1.0.0
%>

resourceFile(model, marker) ::= <<
<generatedCodeMarker(marker)>
<model.AppName>.factory('<model.ServiceName>', ['$resource', <if(model.UseCustomCache)>'$cacheFactory', <endif>function($resource<if(model.UseCustomCache)>, $cacheFactory<endif>)
  {<if(model.UseCustomCache)>
<cacheInit(model)><endif>
    return {
<model.PostEndpoints: { endpoint |<postEndpointTemplate(model, endpoint)>};separator=",
"><if(first(model.PostEndpoints) && first(model.GetEndpoints))>,<endif>
<model.GetEndpoints: { endpoint |<getEndpointTemplate(model, endpoint)>};separator=",
">
    };
  }]);
>>

generatedCodeMarker(marker) ::= <<
/*
  NGANGA - GENERATED CODE  
    Generated on <marker.genDate> at <marker.genTime>
    Controller type name: <marker.controllerTypeName>
    Templates directory: <marker.templatesDirectory>
    Template version: <templateVersion()> 
  */
<changesWillBeLostMarker()>
>>

changesWillBeLostMarker() ::= <<
/* 
  WARNING: 
    Changes to this file will be lost if the code is regenerated 
      To prevent silent overwrites, remove this warning.  
      To overwrite a file without this warning, use the nGanga -Force option.
  */
>>

cacheInit(model) ::= <<
    var resourceCache = $cacheFactory('<model.CustomCacheFactory>');


>>

getEndpointTemplate(model, endpoint) ::= <<
      <endpoint.MethodName>: function( <endpoint.ArgumentNames: { arg | <arg> ,}> successFn, failFn) 
        {
          var rsc = $resource(<getResourceUri(model, endpoint)>, {}, {'get' : { <isArray(endpoint)> <useCache(model)> }});

          return rsc.get({ <endpoint.ArgumentNames:{arg| <arg>: <arg>}; separator=","> }, {}, successFn, failFn);
        }
>>

isArray(endpoint) ::= <<
isArray: <if(endpoint.ReturnsIEnumerable)>true<else>false<endif>
>>

getResourceUri(model, endpoint) ::= <<
'/api/<model.ControllerName>/<endpoint.UrlDisplayName><endpoint.ArgumentQueryString>'
>>

postResourceUri(model, endpoint) ::= <%
'/api/<model.ControllerName>/<endpoint.UrlDisplayName>'
%>

useCache(endpoint) ::= <%
<if(model.UseCustomCache)>
, cache: resourceCache
<elseif(model.UseCache)>
, cache: true
<endif>
%>

postEndpointTemplate(model, endpoint) ::= <<
      <endpoint.MethodName>: function(model, successFn, failFn)
        {
          var rsc = $resource(<postResourceUri(model, endpoint)>, {}, {'save': {<isArray(endpoint)>, method: 'POST'}});

          rsc.save({}, model,  <if(model.UseCustomCache)><clearCustomCache()><else>successFn<endif>, failFn);
        }
>>

clearCustomCache() ::= <<
function(result)
          {
            resourceCache.removeAll();
            successFn(result);
          }
>>