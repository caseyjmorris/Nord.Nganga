resourceFile(model, getEndpoints, postEndpoints, hasGetAndPost) ::= <<
//  remard
<model.AppName>.factory('<model.ServiceName>',[]) 
{
<initialization(model)>
<postEndpoints: { endpoint | <postEndpointTemplate(endpoint)> };separator=","><if(hasGetAndPost)>,<endif>
<getEndpoints: { endpoint | <getEndpointTemplate(model, endpoint)> };separator=",">
};
>>

initialization(model) ::= <<
// we will init <model.AppName> here
>>

getEndpointTemplate(model, endpoint) ::= <<
<endpoint.MethodName>: function( <endpoint.ArgumentNames: { arg | <arg> ,}> successFn, failFn) 
	{
		var rsc = $resource(<resourceUri(model, endpoint)>, {}, {'get' : { <isArray(endpoint)> <useCache(endpoint)> }});
		return rcs.get({ <endpoint.ArgumentNames:{arg| <arg>: <arg>}; separator=","> }, {}, successFn, failFn);
	}	
>>

isArray(endpoint) ::= <<
isArray: <if(endpoint.ReturnsIsIEnumerable)>true<else>false<endif>
>>

resourceUri(model, endpoint) ::= <<
'/api/<model.ControllerName>/<endpoint.MethodName><endpoint.ArgumentQueryString>'
>>

useCache(endpoint) ::= <<
<if(endpoint.UseCache)>, cache: true<endif>
>>

postEndpointTemplate(endpoint) ::= <<
<endpoint.MethodName>: function( model, successFn, failFn) 
	{
		// tbd ... 
	}	
>>