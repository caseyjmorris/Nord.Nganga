templateVersion() ::=<%
1.0.0
%>

file(header, body) ::= <<
<header>
<body>
>>

header(model) ::= <<
<headerStart()> 
    Generated on <model.genDate> at <model.genTime>
    Controller type name: <model.controllerTypeName>
    Templates directory: <model.templatesDirectory>
    Template version: <templateVersion()> 
    Output signature: <model.md5Checksum>
<headerEnd()>
>>

headerStart() ::= <<
/*
  <headerTag()>
>>

headerEnd() ::= <<
  <headerTag()>
  */
>>

headerTag() ::= <%
NGANGA - GENERATED CODE
%>

body(model) ::= <<
<model.NgModuleName>.controller('<model.NgControllerName>', 
  ['$scope', '$state', '$stateParams', 'commonRecordsService', 'userInfoService', '<model.ServiceName>'<model.AdditionalNgServices:{svc|, '<svc>' }>,
  function($scope, $state, $stateParams, commonRecordsService, userInfoService, <model.ServiceName><model.AdditionalNgServices:{svc|, <svc>}>)
    {
      <injectJavaScript(model, "Beginning")>
      <if(model.RouteIdParameter)><primeRouteId(model.RouteIdParameter)><endif>
      <if(model.EditRestricted)><authorizationInformation(model)>
      
      <endif>
      <if(model.HasCommonRecords)>
      <commonRecordsObjectInit(model)>

      <commonRecordsSetup(model)>
      <endif>

      <injectJavaScript(model, "AfterInitialization")>

      <if(model.RouteIdParameterIsNullable)>
      if (<model.RouteIdParameter> !== null)
        {
          <controllerRetrievals(model)>
        }
      <else>
      <controllerRetrievals(model)>
      <endif>

      <injectJavaScript(model, "AfterGet")>

      <postMethods(model)>

      <injectJavaScript(model,"End")>
    }]);
>>

primeRouteId(rid) ::= <<
var <rid> = $stateParams.<rid>;
>>

authorizationInformation(model) ::= <%
$scope.canEdit = <model.EditRestrictedToRoles: {role |userInfoService.userIsInRole('<role>')}; separator=" || ">;
%>

injectJavaScript(model, key) ::= <%
<model.InjectedJavaScript.(key): {c| // Injected JavaScript at context <key> <\n>
<c> <\n>
// End injected JavaScript}; separator="<\n>">
%>

commonRecordsObjectInit(model) ::= <<
<model.CommonRecordObjects:{cr|$scope.<cr> = $scope.<cr> || {\};
}>
>>

commonRecordsSetup(model) ::= <<
<model.CommonRecordsWithResolvers.keys: {cr|
$scope.<cr> = <model.CommonRecordsWithResolvers.(cr)>}>
>>

controllerRetrievals(model) ::= <<
<model.RetrievalTargetGetEndpoints: {ge |
$scope.<ge.ReturnPropertyCamelCase> = <model.ServiceName>.<ge.MethodName>(<model.RouteIdParameter>);
}>
>>

postMethods(model) ::= <<
<model.PostEndpoints: {pe |
$scope.saveChangesTo<pe.FirstArgDisplayNamePascalCase> = function()
  {
    <model.ServiceName>.<pe.MethodName>($scope.<pe.FirstArgDisplayNameCamelCase>, function(result)
      {
        $scope.<pe.FirstArgDisplayNameCamelCase>Form.$setPristine();

        <if(pe.HasReturnValue)>
        $scope.<pe.ReturnPropertyCamelCase> = result;
        <endif>
      \})
  \}
}>
>>